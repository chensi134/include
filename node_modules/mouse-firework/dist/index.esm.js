import anime from 'theme-shokax-anime';

const sample = (raw) => {
    return Array.isArray(raw) ? anime.random(raw[0], raw[1]) : raw;
};
const hasAncestor = (node, name) => {
    name = name.toUpperCase();
    while (node) {
        if (node.nodeName === name)
            return true;
        node = node.parentNode;
    }
    return false;
};
const setEndPos = (p, particle) => {
    var _a;
    if (particle.move.includes("emit")) {
        const { emitRadius = [50, 180] } = (_a = particle.moveOptions) !== null && _a !== void 0 ? _a : {};
        const angle = (anime.random(0, 360) * Math.PI) / 180;
        const radius = [-1, 1][anime.random(0, 1)] * sample(emitRadius);
        p.endPos = {
            x: p.x + radius * Math.cos(angle),
            y: p.y + radius * Math.sin(angle),
        };
    }
};
const setEndRotation = (p, particle) => {
    var _a;
    if (particle.move.includes("rotate")) {
        const { angle = [-180, 180] } = (_a = particle.moveOptions) !== null && _a !== void 0 ? _a : {};
        p.endRotation = sample(angle);
    }
};
const formatAlpha = (alpha) => {
    if (Array.isArray(alpha)) {
        return alpha.map((a) => a * 100);
    }
    return [alpha * 100, alpha * 100];
};

class BaseEntity {
    constructor(ctx, x, y, color, radius, alpha, lineWidth) {
        this.ctx = ctx;
        this.x = x;
        this.y = y;
        this.color = color;
        this.radius = radius;
        this.alpha = alpha;
        this.lineWidth = lineWidth;
        this.rotation = 0;
    }
    draw() {
        const { ctx, x, y } = this;
        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(this.rotation * (Math.PI / 180));
        ctx.globalAlpha = this.alpha;
        this.paint();
        if (this.lineWidth) {
            ctx.lineWidth = this.lineWidth;
            ctx.strokeStyle = this.color;
            ctx.stroke();
        }
        else {
            ctx.fillStyle = this.color;
            ctx.fill();
        }
        ctx.globalAlpha = 1;
        ctx.restore();
    }
}

class Circle extends BaseEntity {
    paint() {
        this.ctx.beginPath();
        this.ctx.arc(0, 0, this.radius, 0, 2 * Math.PI);
        this.ctx.closePath();
    }
}

class Polygon extends BaseEntity {
    constructor(ctx, x, y, color, radius, alpha, sides, lineWidth) {
        super(ctx, x, y, color, radius, alpha, lineWidth);
        this.sides = sides;
    }
    paint() {
        const { ctx, sides, radius } = this;
        ctx.beginPath();
        ctx.moveTo(radius * Math.cos(0), radius * Math.sin(0));
        for (let i = 1; i <= sides; i++) {
            const angle = (i * 2 * Math.PI) / sides;
            ctx.lineTo(radius * Math.cos(angle), radius * Math.sin(angle));
        }
        ctx.closePath();
    }
}

class Star extends BaseEntity {
    constructor(ctx, x, y, color, radius, alpha, spikes, lineWidth) {
        super(ctx, x, y, color, radius, alpha, lineWidth);
        this.spikes = spikes;
    }
    paint() {
        const { ctx, spikes, radius } = this;
        ctx.beginPath();
        ctx.moveTo(0, -radius);
        for (let i = 0; i < spikes * 2; i++) {
            const angle = (i * Math.PI) / spikes - Math.PI / 2;
            const length = i % 2 === 0 ? radius : radius * 0.5;
            const px = Math.cos(angle) * length;
            const py = Math.sin(angle) * length;
            ctx.lineTo(px, py);
        }
        ctx.closePath();
    }
}

const preProcess = (ctx, x, y, particle, shapeType) => {
    const num = sample(particle.number);
    let { radius, alpha = 1, lineWidth } = particle.shapeOptions;
    alpha = formatAlpha(alpha);
    const shapes = [];
    for (let i = 0; i < num; i++) {
        const color = particle.colors[anime.random(0, particle.colors.length - 1)];
        const commonArgs = [ctx, x, y, color, sample(radius), sample(alpha) / 100];
        const shapeArgs = shapeType === Circle
            ? commonArgs
            : [
                ...commonArgs,
                sample(shapeType === Star
                    ? particle.shapeOptions.spikes
                    : particle.shapeOptions.sides),
            ];
        // @ts-expect-error
        const p = new shapeType(...shapeArgs, sample(lineWidth));
        setEndPos(p, particle);
        setEndRotation(p, particle);
        shapes.push(p);
    }
    return shapes;
};
const createCircle = (ctx, x, y, particle) => preProcess(ctx, x, y, particle, Circle);
const createStar = (ctx, x, y, particle) => preProcess(ctx, x, y, particle, Star);
const createPolygon = (ctx, x, y, particle) => preProcess(ctx, x, y, particle, Polygon);

const canvasEl = document.createElement("canvas");
canvasEl.style.cssText =
    "position:fixed;top:0;left:0;pointer-events:none;z-index:9999999";
document.body.appendChild(canvasEl);
const ctx = canvasEl.getContext("2d");
const tap = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)
    ? "touchstart"
    : "click";
let pointerX = 0;
let pointerY = 0;
const setCanvasSize = () => {
    const { clientWidth: width, clientHeight: height } = document.documentElement;
    canvasEl.width = width * 2;
    canvasEl.height = height * 2;
    canvasEl.style.width = width + "px";
    canvasEl.style.height = height + "px";
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.scale(2, 2);
};
const updateCoords = (e) => {
    var _a, _b;
    pointerX =
        (_a = e.clientX) !== null && _a !== void 0 ? _a : (e.touches && e.touches[0].clientX);
    pointerY =
        (_b = e.clientY) !== null && _b !== void 0 ? _b : (e.touches && e.touches[0].clientY);
};
const setParticleMovement = (particle) => {
    var _a, _b;
    const { move, moveOptions } = particle;
    let dist = {};
    if (move.includes("emit")) {
        const { radius = 0.1, alphaChange = false, alphaEasing = "linear", alphaDuration = [600, 800], alpha = 0, } = (_a = moveOptions) !== null && _a !== void 0 ? _a : {};
        dist = {
            x: (p) => p.endPos.x,
            y: (p) => p.endPos.y,
            radius: sample(radius),
        };
        if (alphaChange) {
            dist.alpha = {
                value: sample(formatAlpha(alpha)) / 100,
                easing: alphaEasing,
                duration: sample(alphaDuration),
            };
        }
    }
    else if (move.includes("diffuse")) {
        const { diffuseRadius = [80, 160], lineWidth = 0, alphaEasing = "linear", alphaDuration = [600, 800], alpha = 0, } = (_b = moveOptions) !== null && _b !== void 0 ? _b : {};
        dist = {
            radius: sample(diffuseRadius),
            lineWidth: sample(lineWidth),
            alpha: {
                value: sample(formatAlpha(alpha)) / 100,
                easing: alphaEasing,
                duration: sample(alphaDuration),
            },
        };
    }
    if (move.includes("rotate")) {
        dist.rotation = (p) => p.endRotation;
    }
    return dist;
};
const renderParticle = (targets) => {
    for (const target of targets) {
        target.draw();
    }
};
const render = anime({
    duration: Infinity,
    update() {
        ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);
    },
});
let currentCallback = null;
let globalOptions = null;
const initFireworks = (options) => {
    globalOptions = options;
    if (currentCallback) {
        document.removeEventListener(tap, currentCallback, false);
    }
    currentCallback = (e) => {
        if (options.excludeElements.some((excludeElement) => hasAncestor(e.target, excludeElement))) {
            return;
        }
        render.play();
        updateCoords(e);
        animateParticles(pointerX, pointerY);
    };
    document.addEventListener(tap, currentCallback, false);
    setCanvasSize();
    window.removeEventListener("resize", setCanvasSize, false);
    window.addEventListener("resize", setCanvasSize, false);
};
const animateParticles = (x, y) => {
    if (!globalOptions)
        return;
    const { particles } = globalOptions;
    const timeLine = anime().timeline();
    particles.forEach((particle) => {
        var _a;
        let targets = [];
        switch (particle.shape) {
            case "circle":
                targets = createCircle(ctx, x, y, particle);
                break;
            case "star":
                targets = createStar(ctx, x, y, particle);
                break;
            case "polygon":
                targets = createPolygon(ctx, x, y, particle);
        }
        timeLine.add({
            targets,
            duration: sample(particle.duration),
            easing: (_a = particle.easing) !== null && _a !== void 0 ? _a : "linear",
            update: renderParticle,
            ...setParticleMovement(particle),
        });
    });
    timeLine.play();
};
var index = (options) => {
    if (document.readyState === "loading") {
        window.addEventListener("DOMContentLoaded", () => initFireworks(options), {
            passive: true,
        });
    }
    else {
        initFireworks(options);
    }
};

export { index as default };
